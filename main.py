# ====================== –ò–ú–ü–û–†–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ======================
import logging
from datetime import datetime
from io import BytesIO
from typing import List, Tuple, Dict

import aiosqlite
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command, Text
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from openpyxl import Workbook

# region ====================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======================
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = '–í–ê–®_TELEGRAM_BOT_TOKEN'
ADMIN_IDS = [123456789]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CHANNEL_ID = '@–≤–∞—à_–∫–∞–Ω–∞–ª'  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
COMMENT_CHANNEL_ID = '@–≤–∞—à_–∫–∞–Ω–∞–ª_—Å_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏'
LEADERBOARD_MESSAGE_ID = None  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏

POINT_SYSTEM = {
    'subscription': 1,
    'referral': 2,
    'comment': 1,
    'book_purchase': 5,
    'book_creation': 7
}

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())
# endregion


# ====================== –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ======================
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    async with aiosqlite.connect('ratings.db') as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS users
                         (user_id INTEGER PRIMARY KEY, 
                          username TEXT, 
                          full_name TEXT, 
                          score INTEGER DEFAULT 0,
                          referral_code TEXT,
                          referrals INTEGER DEFAULT 0)''')

        await db.execute('''CREATE TABLE IF NOT EXISTS actions
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          user_id INTEGER,
                          action_type TEXT,
                          points INTEGER,
                          timestamp DATETIME,
                          details TEXT)''')

        await db.execute('''CREATE TABLE IF NOT EXISTS subscriptions
                         (user_id INTEGER PRIMARY KEY,
                          is_subscribed INTEGER DEFAULT 0,
                          last_check DATETIME)''')

        await db.execute('''CREATE TABLE IF NOT EXISTS notification_settings
                         (user_id INTEGER PRIMARY KEY,
                          weekly_notifications INTEGER DEFAULT 1)''')

        await db.execute('''CREATE TABLE IF NOT EXISTS user_positions
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          user_id INTEGER,
                          position INTEGER,
                          date DATETIME)''')

        await db.execute('''CREATE TABLE IF NOT EXISTS admin_messages
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          message_type TEXT,
                          chat_id INTEGER,
                          message_id INTEGER)''')

        await db.commit()


# ====================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================
async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        subscribed = chat_member.status in ['member', 'administrator', 'creator']

        async with aiosqlite.connect('ratings.db') as db:
            await db.execute('''INSERT OR REPLACE INTO subscriptions 
                              (user_id, is_subscribed, last_check) 
                              VALUES (?, ?, ?)''',
                             (user_id, int(subscribed), datetime.now()))
            await db.commit()

        return subscribed
    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        return False


async def add_points(user_id: int, action_type: str, count: int = 1, details: str = None) -> bool:
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if action_type not in POINT_SYSTEM:
        logger.error(f"Invalid action type: {action_type}")
        return False

    points = POINT_SYSTEM[action_type] * count

    try:
        async with aiosqlite.connect('ratings.db') as db:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute('UPDATE users SET score = score + ? WHERE user_id = ?',
                             (points, user_id))

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await db.execute('''INSERT INTO actions 
                             (user_id, action_type, points, timestamp, details) 
                             VALUES (?, ?, ?, ?, ?)''',
                             (user_id, action_type, points, datetime.now(), details))

            # –î–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            if action_type == 'referral':
                await db.execute('UPDATE users SET referrals = referrals + 1 WHERE user_id = ?',
                                 (user_id,))

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            cursor = await db.execute('''SELECT COUNT(*) FROM users WHERE score > 
                                      (SELECT score FROM users WHERE user_id = ?)''',
                                      (user_id,))
            position = (await cursor.fetchone())[0] + 1
            await db.execute('INSERT INTO user_positions (user_id, position, date) VALUES (?, ?, ?)',
                             (user_id, position, datetime.now()))

            await db.commit()

        return True
    except Exception as e:
        logger.error(f"Error adding points: {e}")
        return False


async def get_user_position(user_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
    async with aiosqlite.connect('ratings.db') as db:
        cursor = await db.execute('''SELECT COUNT(*) FROM users WHERE score > 
                                  (SELECT score FROM users WHERE user_id = ?)''',
                                  (user_id,))
        position = (await cursor.fetchone())[0] + 1
        return position


async def get_top_users(limit: int = 10) -> List[Tuple]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with aiosqlite.connect('ratings.db') as db:
        cursor = await db.execute('''SELECT user_id, username, full_name, score 
                                 FROM users 
                                 ORDER BY score DESC 
                                 LIMIT ?''', (limit,))
        return await cursor.fetchall()


async def get_user_stats(user_id: int) -> Dict[str, int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect('ratings.db') as db:
        cursor = await db.execute('''SELECT action_type, SUM(points), COUNT(*) 
                                 FROM actions 
                                 WHERE user_id = ? 
                                 GROUP BY action_type''', (user_id,))
        stats = await cursor.fetchall()

        cursor = await db.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        total_score = (await cursor.fetchone())[0] if cursor.rowcount > 0 else 0

        return {
            'stats': stats,
            'total_score': total_score,
            'position': await get_user_position(user_id)
        }


# ====================== –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ======================
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with aiosqlite.connect('ratings.db') as db:
        await db.execute('''INSERT OR IGNORE INTO users 
                          (user_id, username, full_name, referral_code) 
                          VALUES (?, ?, ?, ?)''',
                         (user.id, user.username, user.full_name, f"ref_{user.id}"))
        await db.commit()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(message.get_args()) > 0 and message.get_args().startswith('ref_'):
        referrer_id = int(message.get_args().split('_')[1])
        if referrer_id != user.id:
            await add_points(referrer_id, 'referral', details=f"–ü—Ä–∏–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
    if await check_subscription(user.id):
        await add_points(user.id, 'subscription')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–∞!",
        reply_markup=await get_main_menu_keyboard()
    )


@dp.message_handler(commands=['stats'])
@dp.message_handler(Text(equals="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_stats = await get_user_stats(message.from_user.id)

    action_descriptions = {
        'subscription': "–ü–æ–¥–ø–∏—Å–∫–∏",
        'referral': "–†–µ—Ñ–µ—Ä–∞–ª—ã",
        'comment': "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
        'book_purchase': "–ü–æ–∫—É–ø–∫–∏ –∫–Ω–∏–≥",
        'book_creation': "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"
    }

    message_text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    for stat in user_stats['stats']:
        message_text += f"‚ñ´Ô∏è {action_descriptions.get(stat[0], stat[0])}: {stat[2]} —Ä–∞–∑(–∞) = {stat[1]} –±–∞–ª–ª–æ–≤\n"

    message_text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {user_stats['total_score']} –±–∞–ª–ª–æ–≤\n"
    message_text += f"<b>–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:</b> {user_stats['position']}\n"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    chart_image = await generate_pie_chart(message.from_user.id, user_stats['stats'])

    await message.answer_photo(
        photo=chart_image,
        caption=message_text,
        parse_mode='HTML',
        reply_markup=await get_main_menu_keyboard()
    )


@dp.message_handler(commands=['leaderboard'])
@dp.message_handler(Text(equals="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"))
async def cmd_leaderboard(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    top_users = await get_top_users(10)
    user_stats = await get_user_stats(message.from_user.id)

    message_text = "üèÜ <b>–¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n"
    for idx, user in enumerate(top_users, 1):
        highlight = " <<< –í–´" if user[0] == message.from_user.id else ""
        name = user[2] if user[2] else f"@{user[1]}" if user[1] else f"ID:{user[0]}"
        message_text += f"{idx}. {name} - {user[3]} –±–∞–ª–ª–æ–≤{highlight}\n"

    if user_stats['position'] > 10:
        message_text += f"\n...\n{user_stats['position']}. –í—ã - {user_stats['total_score']} –±–∞–ª–ª–æ–≤\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='my_stats'))
    keyboard.add(InlineKeyboardButton("üì• –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (Excel)", callback_data='full_report'))

    await message.answer(
        text=message_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )


# ====================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ======================
@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", callback_data='admin_add_points'),
        InlineKeyboardButton("üìä –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data='admin_update_leaderboard'),
        InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data='admin_add_purchase'),
        InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='admin_add_project'),
        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data='admin_export_excel')
    )

    await message.answer(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
        parse_mode='HTML',
        reply_markup=keyboard
    )


# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –ö–ù–û–ü–û–ö ======================
@dp.callback_query_handler(lambda c: c.data == 'my_stats')
async def process_callback_my_stats(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    await cmd_stats(Message(
        chat=callback_query.message.chat,
        from_user=callback_query.from_user,
        text="/stats"
    ))
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == 'full_report')
async def process_callback_full_report(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥'"""
    await generate_excel_report_cmd(Message(
        chat=callback_query.message.chat,
        from_user=callback_query.from_user,
        text="/report"
    ))
    await bot.answer_callback_query(callback_query.id)


# ====================== –£–¢–ò–õ–ò–¢–´ ======================
async def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")],
            [KeyboardButton("üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )


async def generate_pie_chart(user_id: int, stats: List[Tuple]) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    labels = []
    sizes = []

    action_names = {
        'subscription': "–ü–æ–¥–ø–∏—Å–∫–∏",
        'referral': "–†–µ—Ñ–µ—Ä–∞–ª—ã",
        'comment': "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
        'book_purchase': "–ö–Ω–∏–≥–∏",
        'book_creation': "–ü—Ä–æ–µ–∫—Ç—ã"
    }

    for stat in stats:
        labels.append(action_names.get(stat[0], stat[0]))
        sizes.append(stat[1])

    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')
    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–∏—Ö –±–∞–ª–ª–æ–≤")

    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close()

    return buf


async def generate_excel_report() -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞"""
    async with aiosqlite.connect('ratings.db') as db:
        cursor = await db.execute('''SELECT user_id, username, full_name, score 
                                 FROM users 
                                 ORDER BY score DESC''')
        users = await cursor.fetchall()

        wb = Workbook()
        ws = wb.active
        ws.title = "–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        ws.append(["–ú–µ—Å—Ç–æ", "ID", "Username", "–ò–º—è", "–ë–∞–ª–ª—ã", "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤"])

        for idx, user in enumerate(users, 1):
            cursor = await db.execute('''SELECT COUNT(*) FROM actions 
                                     WHERE details LIKE ? AND action_type = 'referral' ''',
                                      (f'%{user[0]}%',))
            referrals = (await cursor.fetchone())[0]
            ws.append([idx, user[0], user[1], user[2], user[3], referrals])

        excel_file = BytesIO()
        wb.save(excel_file)
        excel_file.seek(0)

        return excel_file


async def generate_excel_report_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-–æ—Ç—á–µ—Ç–∞"""
    excel_file = await generate_excel_report()
    await message.answer_document(
        document=InputFile(excel_file, filename='–†–µ–π—Ç–∏–Ω–≥_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.xlsx'),
        caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    )


# ====================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======================
async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await init_db()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)